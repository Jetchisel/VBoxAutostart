#!/usr/bin/env bash

# ============================================================================================ #
#: Title           : systemd-vboxinit                                                          #
#: Sypnosis        : systemd-vboxinit [OPTIONS]                                                #
#: Date Created    : Wed Oct  2 07:57:25 PHT 2013                                              #
#: Last Edit       : Mon May 19 04:11:20 PHT 2014 / Sun May 18 20:11:20 UTC 2014               #
#: License         : GPLv3                                                                     #
#: Version         : 1.6                                                                       #
#: Author          : Jason V. Ferrer '<jetchisel@opensuse.org>'                                #
#: Description     : Auto start sessions when booting and save sessions when host is stopped.  #
#: Options         : --{about,stop,start,disable,license,help}                                 #
#: Home Page       : https://github.com/Jetchisel/VBoxAutostart                                #
#: ExtComm         : cat,find,grep,killproc,less,lsmod,pgrep,pkill,VBoxManage                  #
# ============================================================================================ #

# ******************************************************************************************** #
#                                                                                              #
#              Set shell option so RunningUuids can be tested in one-line.                     #
#                                                                                              #
# ******************************************************************************************** #

shopt -s extglob

# ******************************************************************************************** #
#                                                                                              #
#              Check if VirtualBox is installed if not exit with an error.                     #
#                                                                                              #
# ******************************************************************************************** #

if ! type -P VirtualBox >/dev/null 2>&1; then
  if ! type -P virtualbox >/dev/null 2>&1; then
    if [[ ! -f /usr/lib/virtualbox/VirtualBox ]]; then 
      echo "VirtualBox is either not installed or it's not in your PATH!" >&2
      exit 127
    fi
  fi
fi

# ******************************************************************************************** #
#                                                                                              #
#           Check if vboxdrv kernel module is loaded if not exit with an error.                #
#                                                                                              #
# ******************************************************************************************** #

if ! grep -q "vboxdrv[^_-]" < <(lsmod); then 
  echo 'vboxdrv is not loaded!' >&2
  exit 1
fi

# ******************************************************************************************** #
#                                                                                              #
#          Assign VirtualBox directory /usr/lib/virtualbox to the variable VBoxDir.            #
#                                                                                              #
# ******************************************************************************************** #

[[ -d /usr/lib/virtualbox ]] && VBoxDir=/usr/lib/virtualbox

# ******************************************************************************************** #
#                                                                                              #
#  Use the VBoxManage in /usr/lib/virtualbox if it exist, else use whatever is in your PATH.   #
#                                                                                              #
# ******************************************************************************************** #

VBoxManage() { 
  if [[ -f $VBoxDir/VBoxManage && -x $VBoxDir/VBoxManage ]]; then
      "${VBoxDir}"/VBoxManage "$@"
  else
    if type -P VBoxManage >/dev/null; then
       command -p VBoxManage "$@"
    else
       command -p vboxmanage "$@"
    fi
  fi
}

# ******************************************************************************************** #
#                                                                                              #
#                                  VBoxManage Functions.                                       #
#                                                                                              #
# ******************************************************************************************** #

ExtraData() {
  VBoxManage getextradata "$AllUuid" 'pvbx/startupMode'
}

ListRunningVms() {
  VBoxManage list runningvms
}

ListVms() {
  VBoxManage list vms
}

StartVms() {
  VBoxManage startvm "$AllUuid" --type headless
}

SaveVms() {
  VBoxManage controlvm "$AllUuid" savestate
}

# ******************************************************************************************** #
#                                                                                              #
#            Function to check for vms. If there is none found exit with an error.             #
#                                                                                              #
# ******************************************************************************************** #

NoVmExit() {
  mapfile -u5 -t AllVms 5< <(ListVms)
  (( ${#AllVms[@]} )) || { echo 'No virtual machine found!' >&2; exit 1; }
}

# ******************************************************************************************** #
#                                                                                              #
#  Put the running/sanitized vms uuids in an array and format it in the variable RunningUuids. #
#                                                                                              #
# ******************************************************************************************** #

uuids=()
while read -u6 -r vm; do
  running_uuid=${vm##*"{"} 
  uuids+=("${running_uuid%"}"*}")
done 6< <(ListRunningVms)

printf -v RunningUuids "%s|" "@(${uuids[@]})"
RunningUuids=${RunningUuids%%|}

# ******************************************************************************************** #
#                                                                                              #
#  Function to sanitize/extract the vmname and uuid using P.E. inside the start,stop function. # 
#                                                                                              #
# ******************************************************************************************** #

ExtractVmNameUuid() {
  AllUuid=${line##*"{"}
  AllUuid=${AllUuid%"}"*}
  VmName=${line#*'"'}
  VmName=${VmName%'"'*}
}

# ******************************************************************************************** #
#                                                                                              #
#          Function to print the vms status when started, e.g. running,auto,noauto.            # 
#                                                                                              #
# ******************************************************************************************** #

VmStatus() {
  if (( ${#RunningVms[@]} )); then
    echo
    for i in "${!RunningVms[@]}"; do
      printf '%s\n' "Machine '${RunningVms[i]}' is already running..."
    done
  fi
  
  if (( ${#NoAutoRunning} )); then
    echo
    for j in "${!NoAutoRunning[@]}"; do
      printf '%s\n' "Machine '${NoAutoRunning[j]}' is already running but not on auto..."
    done
  fi
  
  if (( ${#NoAutoVms[@]} )); then
    echo
    for k in "${!NoAutoVms[@]}"; do
      printf '%s\n' "Machine '${NoAutoVms[k]}' is not set to auto..."
    done
  fi  
}

# ******************************************************************************************** #
#                                                                                              #
#                             Function to start the vms Headless.                              # 
#                                                                                              #
# ******************************************************************************************** #

start() {
  NoVmExit
  NoAutoVms=() RunningVms=() NoAutoRunning=()
  
  while read -u7 -r line; do 
    ExtractVmNameUuid   
    if [[ $(ExtraData) = *auto* && $AllUuid != $RunningUuids ]]; then
      printf '\n%s\n' "Starting Machine '$VmName'..."
      StartVms
    elif [[ $(ExtraData) != *auto* && $AllUuid = $RunningUuids ]]; then
      NoAutoRunning+=("$VmName")
    elif [[ $(ExtraData) = *auto* && $AllUuid = $RunningUuids ]]; then
      RunningVms+=("$VmName")
    elif [[ $(ExtraData) != *auto* ]]; then
      NoAutoVms+=("$VmName")
    fi 
  done 7< <(ListVms) 
  
  VmStatus
}

# ******************************************************************************************** #
#                                                                                              #
#               Function to save vms state instead of shutting down completely.                #
#                                                                                              #
# ******************************************************************************************** #

stop() {
   (( ${#uuids[@]} )) || { echo 'No virtual machine runnning!'; }
   while read -u8 -r line; do 
     ExtractVmNameUuid
     if [[ $AllUuid = $RunningUuids ]]; then
       printf '%s\n' "Saving machine '$VmName' state..."
       SaveVms
     fi
   done 8< <(ListVms)
}

# ******************************************************************************************** #
#                                                                                              #
#    find files inside /usr/lib/virtualbox, where vbox executables reside including daemons.   #
#                                                                                              #
# ******************************************************************************************** #

VBoxDaemons() { 
  find "$VBoxDir" -type f -iname '*vbox*'
}

# ******************************************************************************************** #
#                                                                                              #
#    Function to save-state of the vms and stop vbox daemons in preparation for an update.     #
#                                                                                              #
# ******************************************************************************************** #
#----------------------------------------------------------------------------------------------#
# TODO: Better ProcessManagement? killproc(8) is (open)SuSE's speficic tool, but pkill is not. # 
#----------------------------------------------------------------------------------------------#

disable() {
  stop 
  while read -u9 -r daemon; do
    daemon=${daemon##*/}
    if [[  $daemon != *.* ]]; then
      if pgrep -u "$USER" -x "$daemon" >/dev/null; then
        if [[ -f /sbin/killproc && -x /sbin/killproc ]]; then
          /sbin/killproc "$daemon"
        else
          pkill -15 "$daemon"
        fi
      fi
    fi
  done 9< <(VBoxDaemons)  
  echo "All VirtualBox process that is owned by $USER has been stopped."
}

# ******************************************************************************************** #
#                                                                                              #
#                                       Usage Function.                                        #
#                                                                                              #
# ******************************************************************************************** #

help() {
   cat <<EOF

Usage: ${BASH_SOURCE##*/} [OPTIONS] 

Options:
  -s, --start    Start enabled virtual machines otherwise show the state.
  -x, --stop     Save the state of all running virtual machines enabled or not.
  -d, --disable  Like stop but also stops the vbox daemons, useful before a vbox update.
  -h, --help     Show this help.
  -a, --about    A brief info.
  -l, --license  Show license.

EOF
return
}

# ******************************************************************************************** #
#                                                                                              #
#                                      About function.                                         #
#                                                                                              #
# ******************************************************************************************** #

about() { 
    cat <<EOF
    
                     Systemd-vboxinit 

Copyright (C) 2013  Jason V. Ferrer  '<jetchisel@opensuse.org>'

Auto start sessions when booting and save sessions when host is 
stopped using systemd as its start up daemon.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
version 3 as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
(see The LICENSE file) along with this program; if not, write
to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
Floor, Boston, MA  02110-1301, USA.

EOF
return
}

# ******************************************************************************************** #
#                                                                                              #
#                  License function.  (required by GPL, see the LICENSE file)                  #
#                                                                                              #
# ******************************************************************************************** #

license() {
  lisensya=/usr/share/doc/packages/systemd-vboxinit/LICENSE
  [[ -f $lisensya ]] || { echo "Can't find license!" >&2 ; exit 1; }
  less /usr/share/doc/packages/systemd-vboxinit/LICENSE
  return 
}

# ******************************************************************************************** #
#                                                                                              #
#                             Check for a command line option.                                 #
#                                                                                              #
# ******************************************************************************************** #

if (( $# > 1 )); then
  printf '\n%s\n\n' "${BASH_SOURCE##*/} Too many arguments, try --help" >&2
  exit 1
fi

case $1 in
   --about|-a) about;;
 --disable|-d) disable;;
    --help|-h) help; exit 0;;
   --start|-s) start;;
    --stop|-x) stop;;
 --license|-l) license;;           
            *) help >&2; exit 1;;
esac

# ******************************************************************************************** #
#                                                                                              #
#                                    Set the exit staus.                                       #
#                                                                                              #
# ******************************************************************************************** #

exit 0

# ============================================================================================ #
#                                                                                              #
#                                   >>> END OF SCRIPT <<<                                      #
#                                                                                              #
# ============================================================================================ #
