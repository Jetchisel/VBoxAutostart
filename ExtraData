#!/bin/bash

# =========================================================================================== #
#: Title           : ExtraData                                                                #
#: Sypnosis        : ExtraData                                                                #
#: Date Created    : Thu Oct 17 17:47:24 PHT 2013 / Thu Oct 17 09:48:11 UTC 2013              #
#: Last Edit       : Fri 20 Dec 20:14:23 PHT 2013 / Fri 20 Dec 12:14:43 UTC 2013              #
#: License         : GPLv3                                                                    #
#: Version         : 1.0                                                                      #
#: Author          : Jason V. Ferrer '<jetchisel@opensuse.org>'                               #
#: Description     : Set extradata to auto or manual of your vms.                             #
#: Options         : NONE                                                                     #
# =========================================================================================== #

# ******************************************************************************************* #
#                                                                                             #
#                   Set shell option to have multiple test and avoid regexp.                  #
#                                                                                             #
# ******************************************************************************************* #

shopt -s extglob

# ******************************************************************************************* #
#                                                                                             #
#                                list only the vms names.                                     #
#                                                                                             #
# ******************************************************************************************* #

Listvms() {
  while read -r line; do 
    Vmname=${line#*\"}
    Vmname=${Vmname%%\"*}
    echo "$Vmname"
  done < <(VBoxManage list vms)
}

mapfile -t listvms < <(Listvms)

# ******************************************************************************************* #
#                                                                                             #
#              Prints the vms with it's corresponding number within the array.                #
#                                                                                             #
# ******************************************************************************************* #

numbered() { 
  for i in "${!listvms[@]}"; do
    printf "%s\n" "${listvms[i]/#/$i) }"
  done
}

# ******************************************************************************************* #
#                                                                                             #
#                         Function to  set all the vms to auto.                               #
#                                                                                             #
# ******************************************************************************************* #

AutoAll() {
  for vm in "${listvms[@]}"; do
    VBoxManage setextradata "${vm}" pvbx/startupMode auto 
  done
}

# ******************************************************************************************* #
#                                                                                             #
#                         Function to set all the vms to manual.                              #
#                                                                                             #
# ******************************************************************************************* #

ManualAll() {
  for vm in "${listvms[@]}"; do
    VBoxManage setextradata "${vm}" pvbx/startupMode manual
  done
}

# ******************************************************************************************* #
#                                                                                             #
#                                 Get status of all the vms                                   #
#                                                                                             #
# ******************************************************************************************* #

StatusAll() {

  status() {
    for vm in "${listvms[@]}"; do
      VBoxManage getextradata "${vm}" pvbx/startupMode
    done
  }

  mapfile -t stats < <(status)

  for i in "${!listvms[@]}"; do
    printf '%s\n' "VirtualMachine[\"${listvms[i]}\"]=${stats[i]#*: }"
  done
}

# ******************************************************************************************* #
#                                                                                             #
#                  Get only the respective number of the vms in the array.                    #
#                                                                                             #
# ******************************************************************************************* #

Num() {
  while read -r line; do
    echo "${line[@]%)*}"
  done < <(numbered)
}

mapfile -t num < <(Num)

# ******************************************************************************************* #
#                                                                                             #
#                  User has the time to review the output and ask to coninue.                 #
#                                                                                             #
# ******************************************************************************************* #

paused() {
  while :; do
    printf "\n%s\n"
    printf -v prompt "Press [Cc] to continue. "
      read -r -e -p "$prompt" -n1 
        case $REPLY in
          [Cc]) clear 
                return 0 
                clear;;
             *) printf "%s\n" "Invalid answer!"
        esac
  done
}

# ******************************************************************************************* #
#                                                                                             #
#              Wait for 1 second so user can see the output and clear the screen.             #
#                                                                                             #
# ******************************************************************************************* #

Wait(){
  sleep 1 
  clear
}

# ******************************************************************************************* #
#                                                                                             #
#             Format the numbers in the array so it can be tested  in one line.               #
#                                                                                             #
# ******************************************************************************************* #

printf -v new "%s|" "@(${num[@]})"
new=${new%%|} 

# ******************************************************************************************* #
#                                                                                             #
#                        The main menu when the script started.                               #
#                                                                                             #
# ******************************************************************************************* #

MainMenu() {
  cat <<-EOF
+==================================================+
|           SELECT THE CHOICES BELOW               |
+==================================================+

1) SET VMS TO AUTO
2) SET VMS TO MANUAL
3) CHECK STATUS OF VMS
Q) EXIT

(EnterInput) =>

EOF

}

# ******************************************************************************************* #
#                                                                                             #
#                                      The submenus.                                          #
#                                                                                             #
# ******************************************************************************************* #

SubMenuAuto() {
  cat <<-EOF
+==================================================+
|        ENTER THE NUMBER OF THE VMS BELOW         |
+==================================================+ 

$(numbered)
A) SELECT All VMS 
R) RETURN TO MAIN MENU
Q) EXIT

(SetVmsToAuto) =>

EOF

}

SubMenuManual() {
  cat <<-EOF
+==================================================+
|        ENTER THE NUMBER OF THE VMS BELOW         |
+==================================================+ 

$(numbered)
A) SELECT All VMS 
R) RETURN TO MAIN MENU
Q) EXIT

(SetVmsToManual) =>

EOF

}

SubMenuStatus() {
  cat <<-EOF
+==================================================+
|        ENTER THE NUMBER OF THE VMS BELOW         |
+==================================================+ 

$(numbered)
A) SELECT All VMS 
R) RETURN TO MAIN MENU
Q) EXIT

(CheckVmsStatus) =>

EOF

}

# ******************************************************************************************* #
#                                                                                             #
#  Check if vms is more than 9. If it is, then one click button is diabled in the SubMenu.    #
#                                                                                             #
# ******************************************************************************************* #

VmsTotalAuto() {
  if (( ${#listvms[@]} < 10  )); then
    read -r -e -p "$sub_menu_auto" -n1
  elif (( ${#listvms[@]} > 9 )); then
    read -r -e -p "$sub_menu_auto" 
  fi
}

VmsTotalManual() {
  if (( ${#listvms[@]} < 10  )); then
    read -r -e -p "$sub_menu_manual" -n1
  elif (( ${#listvms[@]} > 9 )); then
    read -r -e -p "$sub_menu_manual" 
  fi
}

VmsTotalStatus() {
  if (( ${#listvms[@]} < 10  )); then
    read -r -e -p "$sub_menu_status" -n1
  elif (( ${#listvms[@]} > 9 )); then
    read -r -e -p "$sub_menu_status" 
  fi
}

# ******************************************************************************************* #
#                                                                                             #
#                Save the Menu's to a variable so read can present it properly.               #
#                                                                                             #
# ******************************************************************************************* #

printf -v main_menu "%s" "$(MainMenu) "
printf -v sub_menu_auto "%s" "$(SubMenuAuto) "
printf -v sub_menu_manual "%s" "$(SubMenuManual) "
printf -v sub_menu_status "%s" "$(SubMenuStatus) "

# ******************************************************************************************* #
#                                                                                             #
#                               Function to set vms to auto.                                  #
#                                                                                             #
# ******************************************************************************************* #

Auto() {
  clear
  while true; do
    VmsTotalAuto
     if  [[ ${REPLY} = $new ]]; then   
       VBoxManage setextradata "${listvms[${REPLY}]}"  pvbx/startupMode auto
       printf -v single "[\"%s\"] " "${listvms[${REPLY}]}" 
       printf '\n%s\n' "VirtualMachine $single Has been set to AUTO."
       paused
     elif [[ ${REPLY} = [Aa] ]]; then
       AutoAll
       printf -v all "[\"%s\"] "  "${listvms[@]}"
       printf '\n%s\n' "VirtualMachines: $all" "Has been set to AUTO."
       paused
     elif [[ ${REPLY} = [Rr] ]]; then
       return 0
     elif [[ ${REPLY} = [Qq] ]]; then
       clear
       exit 0
     else  
       printf "\n%s" "Invalid option!" >&2
       Wait
     fi
  done
}

# ******************************************************************************************* #
#                                                                                             #
#                                 Function to set vms to manual.                              #
#                                                                                             #
# ******************************************************************************************* #

Manual() {
  clear
  while true; do   
    VmsTotalManual
      if  [[ ${REPLY} = $new ]]; then
        VBoxManage setextradata "${listvms[${REPLY}]}"  pvbx/startupMode manual
        printf -v single "[\"%s\"] " "${listvms[${REPLY}]}" 
        printf '\n%s\n' "VirtualMachine $single Has been set to MANUAL."
        paused        
      elif [[ ${REPLY} = [Aa] ]]; then
        ManualAll 
        printf -v all "[\"%s\"] "  "${listvms[@]}"
        printf '\n%s\n' "VirtualMachines: $all" "Has been set to MANUAL." 
        paused
      elif [[ ${REPLY} = [Rr] ]]; then
        return 0    
        clear
      elif [[ ${REPLY} = [Qq] ]]; then
        clear
        exit 0    
      else
        printf "\n%s" "Invalid option!" >&2
        Wait
      fi
  done
}

# ******************************************************************************************* #
#                                                                                             #
#                            Function to check status of the vms.                             #
#                                                                                             #
# ******************************************************************************************* #

Status() {
  clear
   while true; do
     VmsTotalStatus
       if  [[ ${REPLY} = $new ]]; then
         result=$(VBoxManage getextradata "${listvms[${REPLY}]}"  pvbx/startupMode)
         printf '\n%s\n' "VirtualMachine[\"${listvms[${REPLY}]}\"]=${result#*: }"
         paused
       elif [[ ${REPLY} = [Aa] ]]; then
         echo
         StatusAll
         paused
       elif [[ ${REPLY} = [Rr] ]]; then
         return 0
         clear
       elif [[ ${REPLY} = [Qq] ]]; then
         clear
         exit 0
       else
         printf "\n%s" "Invalid option!" >&2
         Wait
       fi
   done
}

# ******************************************************************************************* #
#                                                                                             #
#                                  Parsing the main menu.                                     #
#                                                                                             #
# ******************************************************************************************* #

while true; do
  clear
  read -r -e -p "$main_menu" -n1
    case ${REPLY} in 
       1) Auto  ;;
       2) Manual
          clear ;;
       3) Status
          clear ;;
    [Qq]) clear
          exit 0;;
       *) printf "\n%s" "Invalid option!" >&2
          Wait
          clear ;;
    esac
done

# ******************************************************************************************** #
#                                                                                              #
#                                   Set the exit staus.                                        #
#                                                                                              #
# ******************************************************************************************** #

exit 0

# ============================================================================================ #
#                                                                                              # 
#                                  >>> END OF SCRIPT <<<                                       #
#                                                                                              #
# ============================================================================================ # 
